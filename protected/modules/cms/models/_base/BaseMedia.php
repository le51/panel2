<?php

/**
 * This is the model base class for the table "media".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Media".
 *
 * Columns in table "media" available as properties of the model,
 * followed by relations of table "media" available as properties of the model.
 *
 * @property integer $id
 * @property integer $imageId
 * @property string $path
 * @property string $created_at
 * @property string $modified_at
 * @property integer $created_by
 * @property integer $modified_by
 * @property integer $user_id
 * @property string $reader_role
 * @property string $editor_role
 * @property string $manager_role
 * @property string $title_fr
 * @property string $description_fr
 * @property string $title_de
 * @property string $description_de
 * @property string $title_en
 * @property string $description_en
 * @property integer $status
 *
 * @property NodeMedia $id0
 */
abstract class BaseMedia extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'media';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Media|Medias', $n);
	}

	public static function representingColumn() {
		return 'path';
	}

	public function rules() {
		return array(
			array('imageId, path, created_at, modified_at, created_by, modified_by, user_id, reader_role, editor_role, manager_role, title_fr, description_fr, title_de, description_de, title_en, description_en, status', 'required'),
			array('imageId, created_by, modified_by, user_id, status', 'numerical', 'integerOnly'=>true),
			array('path, created_at, modified_at, title_fr', 'length', 'max'=>40),
			array('reader_role, editor_role, manager_role, title_de, title_en', 'length', 'max'=>255),
			array('id, imageId, path, created_at, modified_at, created_by, modified_by, user_id, reader_role, editor_role, manager_role, title_fr, description_fr, title_de, description_de, title_en, description_en, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'id0' => array(self::BELONGS_TO, 'NodeMedia', 'id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => null,
			'imageId' => Yii::t('app', 'Image'),
			'path' => Yii::t('app', 'Path'),
			'created_at' => Yii::t('app', 'Created At'),
			'modified_at' => Yii::t('app', 'Modified At'),
			'created_by' => Yii::t('app', 'Created By'),
			'modified_by' => Yii::t('app', 'Modified By'),
			'user_id' => Yii::t('app', 'User'),
			'reader_role' => Yii::t('app', 'Reader Role'),
			'editor_role' => Yii::t('app', 'Editor Role'),
			'manager_role' => Yii::t('app', 'Manager Role'),
			'title_fr' => Yii::t('app', 'Title Fr'),
			'description_fr' => Yii::t('app', 'Description Fr'),
			'title_de' => Yii::t('app', 'Title De'),
			'description_de' => Yii::t('app', 'Description De'),
			'title_en' => Yii::t('app', 'Title En'),
			'description_en' => Yii::t('app', 'Description En'),
			'status' => Yii::t('app', 'Status'),
			'id0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('imageId', $this->imageId);
		$criteria->compare('path', $this->path, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('modified_at', $this->modified_at, true);
		$criteria->compare('created_by', $this->created_by);
		$criteria->compare('modified_by', $this->modified_by);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('reader_role', $this->reader_role, true);
		$criteria->compare('editor_role', $this->editor_role, true);
		$criteria->compare('manager_role', $this->manager_role, true);
		$criteria->compare('title_fr', $this->title_fr, true);
		$criteria->compare('description_fr', $this->description_fr, true);
		$criteria->compare('title_de', $this->title_de, true);
		$criteria->compare('description_de', $this->description_de, true);
		$criteria->compare('title_en', $this->title_en, true);
		$criteria->compare('description_en', $this->description_en, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}