<?php

/**
 * This is the model base class for the table "inscript_page".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "InscriptPage".
 *
 * Columns in table "inscript_page" available as properties of the model,
 * followed by relations of table "inscript_page" available as properties of the model.
 *
 * @property integer $id_inscript_page
 * @property integer $numero
 * @property string $libelle
 * @property string $commentaire
 * @property string $type
 *
 * @property InscriptPageContent[] $inscriptPageContents
 */
abstract class BaseInscriptPage extends GxActiveRecord {

	public function getDbConnection()
	{
		return Yii::app()->givav;
	}
	
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'inscript_page';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'InscriptPage|InscriptPages', $n);
	}

	public static function representingColumn() {
		return 'type';
	}

	public function rules() {
		return array(
			array('numero', 'numerical', 'integerOnly'=>true),
			array('libelle, commentaire', 'length', 'max'=>255),
			array('type', 'length', 'max'=>10),
			array('numero, libelle, commentaire, type', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id_inscript_page, numero, libelle, commentaire, type', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'inscriptPageContents' => array(self::HAS_MANY, 'InscriptPageContent', 'id_inscript_page'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id_inscript_page' => Yii::t('app', 'Id Inscript Page'),
			'numero' => Yii::t('app', 'Numero'),
			'libelle' => Yii::t('app', 'Libelle'),
			'commentaire' => Yii::t('app', 'Commentaire'),
			'type' => Yii::t('app', 'Type'),
			'inscriptPageContents' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id_inscript_page', $this->id_inscript_page);
		$criteria->compare('numero', $this->numero);
		$criteria->compare('libelle', $this->libelle, true);
		$criteria->compare('commentaire', $this->commentaire, true);
		$criteria->compare('type', $this->type, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
